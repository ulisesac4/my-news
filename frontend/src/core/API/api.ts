/* tslint:disable */
/* eslint-disable */
/**
 * MyNewsletter API
 * Example of CRUD API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IssuesDelete200Response
 */
export interface IssuesDelete200Response {
    /**
     * 
     * @type {IssuesDelete200ResponseIssue}
     * @memberof IssuesDelete200Response
     */
    'issue'?: IssuesDelete200ResponseIssue;
}
/**
 * 
 * @export
 * @interface IssuesDelete200Response1
 */
export interface IssuesDelete200Response1 {
    /**
     * The number of issues updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof IssuesDelete200Response1
     */
    'rowsDeleted'?: number;
}
/**
 * 
 * @export
 * @interface IssuesDelete200Response2
 */
export interface IssuesDelete200Response2 {
    /**
     * The number of issues updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof IssuesDelete200Response2
     */
    'rowsUpdated'?: number;
}
/**
 * 
 * @export
 * @interface IssuesDelete200ResponseIssue
 */
export interface IssuesDelete200ResponseIssue {
    /**
     * The create Issue ID.
     * @type {number}
     * @memberof IssuesDelete200ResponseIssue
     */
    'id'?: number;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'name'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'content'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'attachments'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'publishDate'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'isSent'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'NewsletterId'?: string;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'TemplateId'?: string;
    /**
     * The Issue\'s created hour in iso format.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'createdAt'?: string;
    /**
     * The Issue\'s updated hour in iso format.
     * @type {string}
     * @memberof IssuesDelete200ResponseIssue
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface IssuesDeleteRequest
 */
export interface IssuesDeleteRequest {
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'name': string;
    /**
     * The Issue\'s html content without taking in mind the Template html.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'content'?: string;
    /**
     * The Issue\'s attachments in array form.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'attachments'?: string;
    /**
     * The Issue\'s publish date.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'publishDate'?: string;
    /**
     * The Issue\'s state of being sent.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'isSent'?: string;
    /**
     * The Newsletter id where this Issue is put at.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'newsletterId'?: string;
    /**
     * The Template id where this Issue is put at.
     * @type {string}
     * @memberof IssuesDeleteRequest
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface IssuesDeleteRequest1
 */
export interface IssuesDeleteRequest1 {
    /**
     * The Issue\'s id.
     * @type {string}
     * @memberof IssuesDeleteRequest1
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface IssuesDeleteRequest2
 */
export interface IssuesDeleteRequest2 {
    /**
     * The create Issue ID.
     * @type {number}
     * @memberof IssuesDeleteRequest2
     */
    'id': number;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'name': string;
    /**
     * The Issue\'s html content without taking in mind the Template html.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'content'?: string;
    /**
     * The Issue\'s attachments in array form.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'attachments'?: string;
    /**
     * The Issue\'s publish date.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'publishDate'?: string;
    /**
     * The Issue\'s state of being sent.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'isSent'?: string;
    /**
     * The Newsletter id where this Issue is put at.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'newsletterId'?: string;
    /**
     * The Template id where this Issue is put at.
     * @type {string}
     * @memberof IssuesDeleteRequest2
     */
    'templateId'?: string;
}
/**
 * 
 * @export
 * @interface IssuesIssueIdGet200Response
 */
export interface IssuesIssueIdGet200Response {
    /**
     * 
     * @type {IssuesIssueIdGet200ResponseIssue}
     * @memberof IssuesIssueIdGet200Response
     */
    'issue'?: IssuesIssueIdGet200ResponseIssue;
}
/**
 * 
 * @export
 * @interface IssuesIssueIdGet200ResponseIssue
 */
export interface IssuesIssueIdGet200ResponseIssue {
    /**
     * The create Issue ID.
     * @type {number}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'id'?: number;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'name'?: string;
    /**
     * The Issue\'s html content without taking in mind the Template html.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'content'?: string;
    /**
     * The Issue\'s attachments in array form.
     * @type {Array<string>}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'attachments'?: Array<string>;
    /**
     * The Issue\'s publish date.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'publishDate'?: string;
    /**
     * The Issue\'s state of being sent.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'isSent'?: string;
    /**
     * The Newsletter id where this Issue is put at.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'NewsletterId'?: string;
    /**
     * The Template id where this Issue is put at.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'TemplateId'?: string;
    /**
     * The Issue\'s created hour in iso format.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'createdAt'?: string;
    /**
     * The Issue\'s updated hour in iso format.
     * @type {string}
     * @memberof IssuesIssueIdGet200ResponseIssue
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface IssuesNewsletterIdGet200Response
 */
export interface IssuesNewsletterIdGet200Response {
    /**
     * 
     * @type {Array<IssuesNewsletterIdGet200ResponseIssuesInner>}
     * @memberof IssuesNewsletterIdGet200Response
     */
    'issues'?: Array<IssuesNewsletterIdGet200ResponseIssuesInner>;
}
/**
 * 
 * @export
 * @interface IssuesNewsletterIdGet200ResponseIssuesInner
 */
export interface IssuesNewsletterIdGet200ResponseIssuesInner {
    /**
     * The create Issue ID.
     * @type {number}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'id'?: number;
    /**
     * The Issue\'s name.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'name'?: string;
    /**
     * The Issue\'s html content without taking in mind the Template html.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'content'?: string;
    /**
     * The Issue\'s attachments in array form.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'attachments'?: string;
    /**
     * The Issue\'s publish date.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'publishDate'?: string;
    /**
     * The Issue\'s state of being sent.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'isSent'?: string;
    /**
     * The Newsletter id where this Issue is put at.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'NewsletterId'?: string;
    /**
     * The Template id where this Issue is put at.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'TemplateId'?: string;
    /**
     * The Issue\'s created hour in iso format.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'createdAt'?: string;
    /**
     * The Issue\'s updated hour in iso format.
     * @type {string}
     * @memberof IssuesNewsletterIdGet200ResponseIssuesInner
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface IssuesSendPost200Response
 */
export interface IssuesSendPost200Response {
    /**
     * Checks if the issue was sent or not
     * @type {boolean}
     * @memberof IssuesSendPost200Response
     */
    'isSent'?: boolean;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200Response
 */
export interface NewslettersDelete200Response {
    /**
     * 
     * @type {Array<NewslettersDelete200ResponseNewslettersInner>}
     * @memberof NewslettersDelete200Response
     */
    'newsletters'?: Array<NewslettersDelete200ResponseNewslettersInner>;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200Response1
 */
export interface NewslettersDelete200Response1 {
    /**
     * 
     * @type {NewslettersDelete200Response1Newsletter}
     * @memberof NewslettersDelete200Response1
     */
    'newsletter'?: NewslettersDelete200Response1Newsletter;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200Response1Newsletter
 */
export interface NewslettersDelete200Response1Newsletter {
    /**
     * The create Newsletter ID.
     * @type {number}
     * @memberof NewslettersDelete200Response1Newsletter
     */
    'id'?: number;
    /**
     * The Newsletter\'s name.
     * @type {string}
     * @memberof NewslettersDelete200Response1Newsletter
     */
    'name'?: string;
    /**
     * The Newsletter\'s created hour in iso format.
     * @type {string}
     * @memberof NewslettersDelete200Response1Newsletter
     */
    'createdAt'?: string;
    /**
     * The Newsletter\'s updated hour in iso format.
     * @type {string}
     * @memberof NewslettersDelete200Response1Newsletter
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200Response2
 */
export interface NewslettersDelete200Response2 {
    /**
     * The number of newsletters updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof NewslettersDelete200Response2
     */
    'rowsDeleted'?: number;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200Response3
 */
export interface NewslettersDelete200Response3 {
    /**
     * The number of newsletters updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof NewslettersDelete200Response3
     */
    'rowsUpdated'?: number;
}
/**
 * 
 * @export
 * @interface NewslettersDelete200ResponseNewslettersInner
 */
export interface NewslettersDelete200ResponseNewslettersInner {
    /**
     * The Newsletter\'s ID.
     * @type {number}
     * @memberof NewslettersDelete200ResponseNewslettersInner
     */
    'id'?: number;
    /**
     * The Newsletter\'s name.
     * @type {string}
     * @memberof NewslettersDelete200ResponseNewslettersInner
     */
    'name'?: string;
    /**
     * The Newsletter\'s created hour in iso format.
     * @type {string}
     * @memberof NewslettersDelete200ResponseNewslettersInner
     */
    'createdAt'?: string;
    /**
     * The Newsletter\'s updated hour in iso format.
     * @type {string}
     * @memberof NewslettersDelete200ResponseNewslettersInner
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface NewslettersDeleteRequest
 */
export interface NewslettersDeleteRequest {
    /**
     * The Newsletter\'s name.
     * @type {string}
     * @memberof NewslettersDeleteRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface NewslettersDeleteRequest1
 */
export interface NewslettersDeleteRequest1 {
    /**
     * The Newsletter\'s id.
     * @type {string}
     * @memberof NewslettersDeleteRequest1
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface NewslettersDeleteRequest2
 */
export interface NewslettersDeleteRequest2 {
    /**
     * The Newsletter\'s ID to update.
     * @type {number}
     * @memberof NewslettersDeleteRequest2
     */
    'id': number;
    /**
     * The Newsletter\'s name.
     * @type {string}
     * @memberof NewslettersDeleteRequest2
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RecipientsDelete200Response
 */
export interface RecipientsDelete200Response {
    /**
     * 
     * @type {RecipientsDelete200ResponseRecipients}
     * @memberof RecipientsDelete200Response
     */
    'recipients'?: RecipientsDelete200ResponseRecipients;
}
/**
 * 
 * @export
 * @interface RecipientsDelete200Response1
 */
export interface RecipientsDelete200Response1 {
    /**
     * The number of recipients updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof RecipientsDelete200Response1
     */
    'rowsDeleted'?: number;
}
/**
 * 
 * @export
 * @interface RecipientsDelete200ResponseRecipients
 */
export interface RecipientsDelete200ResponseRecipients {
    /**
     * The create Recipient ID.
     * @type {number}
     * @memberof RecipientsDelete200ResponseRecipients
     */
    'id'?: number;
    /**
     * The Recipient\'s email.
     * @type {string}
     * @memberof RecipientsDelete200ResponseRecipients
     */
    'email'?: string;
    /**
     * The Recipient\'s created hour in iso format.
     * @type {string}
     * @memberof RecipientsDelete200ResponseRecipients
     */
    'createdAt'?: string;
    /**
     * The Recipient\'s updated hour in iso format.
     * @type {string}
     * @memberof RecipientsDelete200ResponseRecipients
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface RecipientsDeleteRequest
 */
export interface RecipientsDeleteRequest {
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipientsDeleteRequest
     */
    'emails': Array<string>;
    /**
     * The id of the Newsletter where these recipients will be put at.
     * @type {string}
     * @memberof RecipientsDeleteRequest
     */
    'newsletterId': string;
}
/**
 * 
 * @export
 * @interface RecipientsDeleteRequest1
 */
export interface RecipientsDeleteRequest1 {
    /**
     * The Recipient\'s id.
     * @type {string}
     * @memberof RecipientsDeleteRequest1
     */
    'id': string;
    /**
     * The id of the Newsletter where these recipients will be put at.
     * @type {string}
     * @memberof RecipientsDeleteRequest1
     */
    'newsletterId'?: string;
}
/**
 * 
 * @export
 * @interface RecipientsIdGet200Response
 */
export interface RecipientsIdGet200Response {
    /**
     * 
     * @type {Array<RecipientsIdGet200ResponseRecipientsInner>}
     * @memberof RecipientsIdGet200Response
     */
    'recipients'?: Array<RecipientsIdGet200ResponseRecipientsInner>;
}
/**
 * 
 * @export
 * @interface RecipientsIdGet200ResponseRecipientsInner
 */
export interface RecipientsIdGet200ResponseRecipientsInner {
    /**
     * The create Recipient ID.
     * @type {number}
     * @memberof RecipientsIdGet200ResponseRecipientsInner
     */
    'id'?: number;
    /**
     * The Recipient\'s email.
     * @type {string}
     * @memberof RecipientsIdGet200ResponseRecipientsInner
     */
    'email'?: string;
    /**
     * The Recipient\'s created hour in iso format.
     * @type {string}
     * @memberof RecipientsIdGet200ResponseRecipientsInner
     */
    'createdAt'?: string;
    /**
     * The Recipient\'s updated hour in iso format.
     * @type {string}
     * @memberof RecipientsIdGet200ResponseRecipientsInner
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200Response
 */
export interface TemplatesDelete200Response {
    /**
     * 
     * @type {Array<TemplatesDelete200ResponseTemplatesInner>}
     * @memberof TemplatesDelete200Response
     */
    'templates'?: Array<TemplatesDelete200ResponseTemplatesInner>;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200Response1
 */
export interface TemplatesDelete200Response1 {
    /**
     * 
     * @type {TemplatesDelete200Response1Template}
     * @memberof TemplatesDelete200Response1
     */
    'template'?: TemplatesDelete200Response1Template;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200Response1Template
 */
export interface TemplatesDelete200Response1Template {
    /**
     * The create Template ID.
     * @type {number}
     * @memberof TemplatesDelete200Response1Template
     */
    'id'?: number;
    /**
     * The Template\'s name.
     * @type {string}
     * @memberof TemplatesDelete200Response1Template
     */
    'name'?: string;
    /**
     * The Template\'s html content.
     * @type {string}
     * @memberof TemplatesDelete200Response1Template
     */
    'content'?: string;
    /**
     * The Template\'s created hour in iso format.
     * @type {string}
     * @memberof TemplatesDelete200Response1Template
     */
    'createdAt'?: string;
    /**
     * The Template\'s updated hour in iso format.
     * @type {string}
     * @memberof TemplatesDelete200Response1Template
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200Response2
 */
export interface TemplatesDelete200Response2 {
    /**
     * The number of templates updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof TemplatesDelete200Response2
     */
    'rowsDeleted'?: number;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200Response3
 */
export interface TemplatesDelete200Response3 {
    /**
     * The number of templates updated, normally must be 1 it may be 0 if it didn\'t updated.
     * @type {number}
     * @memberof TemplatesDelete200Response3
     */
    'rowsUpdated'?: number;
}
/**
 * 
 * @export
 * @interface TemplatesDelete200ResponseTemplatesInner
 */
export interface TemplatesDelete200ResponseTemplatesInner {
    /**
     * The Template\'s ID.
     * @type {number}
     * @memberof TemplatesDelete200ResponseTemplatesInner
     */
    'id'?: number;
    /**
     * The Template\'s name.
     * @type {string}
     * @memberof TemplatesDelete200ResponseTemplatesInner
     */
    'name'?: string;
    /**
     * The Template\'s html content.
     * @type {string}
     * @memberof TemplatesDelete200ResponseTemplatesInner
     */
    'content'?: string;
    /**
     * The Template\'s created hour in iso format.
     * @type {string}
     * @memberof TemplatesDelete200ResponseTemplatesInner
     */
    'createdAt'?: string;
    /**
     * The Template\'s updated hour in iso format.
     * @type {string}
     * @memberof TemplatesDelete200ResponseTemplatesInner
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface TemplatesDeleteRequest
 */
export interface TemplatesDeleteRequest {
    /**
     * The Template\'s name.
     * @type {string}
     * @memberof TemplatesDeleteRequest
     */
    'name': string;
    /**
     * The Template\'s html content. It must contain the element \">>!content!<<\" without \"\" in the desired tag, this is where the newsletter lives.
     * @type {string}
     * @memberof TemplatesDeleteRequest
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface TemplatesDeleteRequest1
 */
export interface TemplatesDeleteRequest1 {
    /**
     * The Template\'s id.
     * @type {string}
     * @memberof TemplatesDeleteRequest1
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface TemplatesDeleteRequest2
 */
export interface TemplatesDeleteRequest2 {
    /**
     * The Template\'s ID to update.
     * @type {number}
     * @memberof TemplatesDeleteRequest2
     */
    'id': number;
    /**
     * The Template\'s name.
     * @type {string}
     * @memberof TemplatesDeleteRequest2
     */
    'name': string;
    /**
     * The Template\'s html content.
     * @type {string}
     * @memberof TemplatesDeleteRequest2
     */
    'content'?: string;
}

/**
 * IssueApi - axios parameter creator
 * @export
 */
export const IssueApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Destroy an Issue only
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesDelete: async (issuesDeleteRequest1: IssuesDeleteRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuesDeleteRequest1' is not null or undefined
            assertParamExists('issuesDelete', 'issuesDeleteRequest1', issuesDeleteRequest1)
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuesDeleteRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get one Issues of
         * @param {number} id The Issue\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesIssueIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('issuesIssueIdGet', 'id', id)
            const localVarPath = `/issues/issue/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Issues of a Newsletter
         * @param {number} newsletterId The Newsletter\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesNewsletterIdGet: async (newsletterId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsletterId' is not null or undefined
            assertParamExists('issuesNewsletterIdGet', 'newsletterId', newsletterId)
            const localVarPath = `/issues/{newsletterId}`
                .replace(`{${"newsletterId"}}`, encodeURIComponent(String(newsletterId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Issue
         * @param {IssuesDeleteRequest2} issuesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPatch: async (issuesDeleteRequest2: IssuesDeleteRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuesDeleteRequest2' is not null or undefined
            assertParamExists('issuesPatch', 'issuesDeleteRequest2', issuesDeleteRequest2)
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuesDeleteRequest2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Issue
         * @param {IssuesDeleteRequest} issuesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPost: async (issuesDeleteRequest: IssuesDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuesDeleteRequest' is not null or undefined
            assertParamExists('issuesPost', 'issuesDeleteRequest', issuesDeleteRequest)
            const localVarPath = `/issues`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuesDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends an Issue
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSendPost: async (issuesDeleteRequest1: IssuesDeleteRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuesDeleteRequest1' is not null or undefined
            assertParamExists('issuesSendPost', 'issuesDeleteRequest1', issuesDeleteRequest1)
            const localVarPath = `/issues/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuesDeleteRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IssueApi - functional programming interface
 * @export
 */
export const IssueApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IssueApiAxiosParamCreator(configuration)
    return {
        /**
         * Destroy an Issue only
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesDelete(issuesDeleteRequest1: IssuesDeleteRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesDelete200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesDelete(issuesDeleteRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get one Issues of
         * @param {number} id The Issue\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesIssueIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesIssueIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesIssueIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Issues of a Newsletter
         * @param {number} newsletterId The Newsletter\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesNewsletterIdGet(newsletterId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesNewsletterIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesNewsletterIdGet(newsletterId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an Issue
         * @param {IssuesDeleteRequest2} issuesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesPatch(issuesDeleteRequest2: IssuesDeleteRequest2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesDelete200Response2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesPatch(issuesDeleteRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Issue
         * @param {IssuesDeleteRequest} issuesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesPost(issuesDeleteRequest: IssuesDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesPost(issuesDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends an Issue
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuesSendPost(issuesDeleteRequest1: IssuesDeleteRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuesSendPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuesSendPost(issuesDeleteRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IssueApi - factory interface
 * @export
 */
export const IssueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IssueApiFp(configuration)
    return {
        /**
         * Destroy an Issue only
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesDelete(issuesDeleteRequest1: IssuesDeleteRequest1, options?: any): AxiosPromise<IssuesDelete200Response1> {
            return localVarFp.issuesDelete(issuesDeleteRequest1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get one Issues of
         * @param {number} id The Issue\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesIssueIdGet(id: number, options?: any): AxiosPromise<IssuesIssueIdGet200Response> {
            return localVarFp.issuesIssueIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Issues of a Newsletter
         * @param {number} newsletterId The Newsletter\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesNewsletterIdGet(newsletterId: number, options?: any): AxiosPromise<IssuesNewsletterIdGet200Response> {
            return localVarFp.issuesNewsletterIdGet(newsletterId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Issue
         * @param {IssuesDeleteRequest2} issuesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPatch(issuesDeleteRequest2: IssuesDeleteRequest2, options?: any): AxiosPromise<IssuesDelete200Response2> {
            return localVarFp.issuesPatch(issuesDeleteRequest2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Issue
         * @param {IssuesDeleteRequest} issuesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesPost(issuesDeleteRequest: IssuesDeleteRequest, options?: any): AxiosPromise<IssuesDelete200Response> {
            return localVarFp.issuesPost(issuesDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends an Issue
         * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuesSendPost(issuesDeleteRequest1: IssuesDeleteRequest1, options?: any): AxiosPromise<IssuesSendPost200Response> {
            return localVarFp.issuesSendPost(issuesDeleteRequest1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IssueApi - object-oriented interface
 * @export
 * @class IssueApi
 * @extends {BaseAPI}
 */
export class IssueApi extends BaseAPI {
    /**
     * Destroy an Issue only
     * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesDelete(issuesDeleteRequest1: IssuesDeleteRequest1, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesDelete(issuesDeleteRequest1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get one Issues of
     * @param {number} id The Issue\&#39;s id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesIssueIdGet(id: number, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesIssueIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Issues of a Newsletter
     * @param {number} newsletterId The Newsletter\&#39;s id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesNewsletterIdGet(newsletterId: number, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesNewsletterIdGet(newsletterId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Issue
     * @param {IssuesDeleteRequest2} issuesDeleteRequest2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesPatch(issuesDeleteRequest2: IssuesDeleteRequest2, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesPatch(issuesDeleteRequest2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Issue
     * @param {IssuesDeleteRequest} issuesDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesPost(issuesDeleteRequest: IssuesDeleteRequest, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesPost(issuesDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends an Issue
     * @param {IssuesDeleteRequest1} issuesDeleteRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IssueApi
     */
    public issuesSendPost(issuesDeleteRequest1: IssuesDeleteRequest1, options?: AxiosRequestConfig) {
        return IssueApiFp(this.configuration).issuesSendPost(issuesDeleteRequest1, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NewsletterApi - axios parameter creator
 * @export
 */
export const NewsletterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Destroy an Newsletter only, issues and recipients will remain but will become inaccesible
         * @param {NewslettersDeleteRequest1} newslettersDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersDelete: async (newslettersDeleteRequest1: NewslettersDeleteRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newslettersDeleteRequest1' is not null or undefined
            assertParamExists('newslettersDelete', 'newslettersDeleteRequest1', newslettersDeleteRequest1)
            const localVarPath = `/newsletters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newslettersDeleteRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Newsletters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/newsletters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Newsletter
         * @param {NewslettersDeleteRequest2} newslettersDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersPatch: async (newslettersDeleteRequest2: NewslettersDeleteRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newslettersDeleteRequest2' is not null or undefined
            assertParamExists('newslettersPatch', 'newslettersDeleteRequest2', newslettersDeleteRequest2)
            const localVarPath = `/newsletters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newslettersDeleteRequest2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Newsletter
         * @param {NewslettersDeleteRequest} newslettersDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersPost: async (newslettersDeleteRequest: NewslettersDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newslettersDeleteRequest' is not null or undefined
            assertParamExists('newslettersPost', 'newslettersDeleteRequest', newslettersDeleteRequest)
            const localVarPath = `/newsletters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newslettersDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsletterApi - functional programming interface
 * @export
 */
export const NewsletterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsletterApiAxiosParamCreator(configuration)
    return {
        /**
         * Destroy an Newsletter only, issues and recipients will remain but will become inaccesible
         * @param {NewslettersDeleteRequest1} newslettersDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newslettersDelete(newslettersDeleteRequest1: NewslettersDeleteRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewslettersDelete200Response2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newslettersDelete(newslettersDeleteRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Newsletters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newslettersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewslettersDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newslettersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an Newsletter
         * @param {NewslettersDeleteRequest2} newslettersDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newslettersPatch(newslettersDeleteRequest2: NewslettersDeleteRequest2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewslettersDelete200Response3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newslettersPatch(newslettersDeleteRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Newsletter
         * @param {NewslettersDeleteRequest} newslettersDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newslettersPost(newslettersDeleteRequest: NewslettersDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewslettersDelete200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newslettersPost(newslettersDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsletterApi - factory interface
 * @export
 */
export const NewsletterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsletterApiFp(configuration)
    return {
        /**
         * Destroy an Newsletter only, issues and recipients will remain but will become inaccesible
         * @param {NewslettersDeleteRequest1} newslettersDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersDelete(newslettersDeleteRequest1: NewslettersDeleteRequest1, options?: any): AxiosPromise<NewslettersDelete200Response2> {
            return localVarFp.newslettersDelete(newslettersDeleteRequest1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Newsletters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersGet(options?: any): AxiosPromise<NewslettersDelete200Response> {
            return localVarFp.newslettersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Newsletter
         * @param {NewslettersDeleteRequest2} newslettersDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersPatch(newslettersDeleteRequest2: NewslettersDeleteRequest2, options?: any): AxiosPromise<NewslettersDelete200Response3> {
            return localVarFp.newslettersPatch(newslettersDeleteRequest2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Newsletter
         * @param {NewslettersDeleteRequest} newslettersDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newslettersPost(newslettersDeleteRequest: NewslettersDeleteRequest, options?: any): AxiosPromise<NewslettersDelete200Response1> {
            return localVarFp.newslettersPost(newslettersDeleteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NewsletterApi - object-oriented interface
 * @export
 * @class NewsletterApi
 * @extends {BaseAPI}
 */
export class NewsletterApi extends BaseAPI {
    /**
     * Destroy an Newsletter only, issues and recipients will remain but will become inaccesible
     * @param {NewslettersDeleteRequest1} newslettersDeleteRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newslettersDelete(newslettersDeleteRequest1: NewslettersDeleteRequest1, options?: AxiosRequestConfig) {
        return NewsletterApiFp(this.configuration).newslettersDelete(newslettersDeleteRequest1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Newsletters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newslettersGet(options?: AxiosRequestConfig) {
        return NewsletterApiFp(this.configuration).newslettersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Newsletter
     * @param {NewslettersDeleteRequest2} newslettersDeleteRequest2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newslettersPatch(newslettersDeleteRequest2: NewslettersDeleteRequest2, options?: AxiosRequestConfig) {
        return NewsletterApiFp(this.configuration).newslettersPatch(newslettersDeleteRequest2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Newsletter
     * @param {NewslettersDeleteRequest} newslettersDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsletterApi
     */
    public newslettersPost(newslettersDeleteRequest: NewslettersDeleteRequest, options?: AxiosRequestConfig) {
        return NewsletterApiFp(this.configuration).newslettersPost(newslettersDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecipientApi - axios parameter creator
 * @export
 */
export const RecipientApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Destroy an Recipient only
         * @param {RecipientsDeleteRequest1} recipientsDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsDelete: async (recipientsDeleteRequest1: RecipientsDeleteRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientsDeleteRequest1' is not null or undefined
            assertParamExists('recipientsDelete', 'recipientsDeleteRequest1', recipientsDeleteRequest1)
            const localVarPath = `/recipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipientsDeleteRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Recipients
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recipientsIdGet', 'id', id)
            const localVarPath = `/recipients/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Recipient
         * @param {RecipientsDeleteRequest} recipientsDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsPost: async (recipientsDeleteRequest: RecipientsDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipientsDeleteRequest' is not null or undefined
            assertParamExists('recipientsPost', 'recipientsDeleteRequest', recipientsDeleteRequest)
            const localVarPath = `/recipients`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipientsDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipientApi - functional programming interface
 * @export
 */
export const RecipientApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipientApiAxiosParamCreator(configuration)
    return {
        /**
         * Destroy an Recipient only
         * @param {RecipientsDeleteRequest1} recipientsDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipientsDelete(recipientsDeleteRequest1: RecipientsDeleteRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsDelete200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipientsDelete(recipientsDeleteRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Recipients
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipientsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsIdGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipientsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Recipient
         * @param {RecipientsDeleteRequest} recipientsDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recipientsPost(recipientsDeleteRequest: RecipientsDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipientsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recipientsPost(recipientsDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipientApi - factory interface
 * @export
 */
export const RecipientApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipientApiFp(configuration)
    return {
        /**
         * Destroy an Recipient only
         * @param {RecipientsDeleteRequest1} recipientsDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsDelete(recipientsDeleteRequest1: RecipientsDeleteRequest1, options?: any): AxiosPromise<RecipientsDelete200Response1> {
            return localVarFp.recipientsDelete(recipientsDeleteRequest1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Recipients
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsIdGet(id: number, options?: any): AxiosPromise<RecipientsIdGet200Response> {
            return localVarFp.recipientsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Recipient
         * @param {RecipientsDeleteRequest} recipientsDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recipientsPost(recipientsDeleteRequest: RecipientsDeleteRequest, options?: any): AxiosPromise<RecipientsDelete200Response> {
            return localVarFp.recipientsPost(recipientsDeleteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipientApi - object-oriented interface
 * @export
 * @class RecipientApi
 * @extends {BaseAPI}
 */
export class RecipientApi extends BaseAPI {
    /**
     * Destroy an Recipient only
     * @param {RecipientsDeleteRequest1} recipientsDeleteRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApi
     */
    public recipientsDelete(recipientsDeleteRequest1: RecipientsDeleteRequest1, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).recipientsDelete(recipientsDeleteRequest1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Recipients
     * @param {number} id The Template\&#39;s id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApi
     */
    public recipientsIdGet(id: number, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).recipientsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Recipient
     * @param {RecipientsDeleteRequest} recipientsDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipientApi
     */
    public recipientsPost(recipientsDeleteRequest: RecipientsDeleteRequest, options?: AxiosRequestConfig) {
        return RecipientApiFp(this.configuration).recipientsPost(recipientsDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Destroy an Template only, issues related to this won\'t be able to send their newsletter.
         * @param {TemplatesDeleteRequest1} templatesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDelete: async (templatesDeleteRequest1: TemplatesDeleteRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templatesDeleteRequest1' is not null or undefined
            assertParamExists('templatesDelete', 'templatesDeleteRequest1', templatesDeleteRequest1)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(templatesDeleteRequest1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show the full contents of a Template
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('templatesIdGet', 'id', id)
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an Template
         * @param {TemplatesDeleteRequest2} templatesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPatch: async (templatesDeleteRequest2: TemplatesDeleteRequest2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templatesDeleteRequest2' is not null or undefined
            assertParamExists('templatesPatch', 'templatesDeleteRequest2', templatesDeleteRequest2)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(templatesDeleteRequest2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an Template
         * @param {TemplatesDeleteRequest} templatesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost: async (templatesDeleteRequest: TemplatesDeleteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templatesDeleteRequest' is not null or undefined
            assertParamExists('templatesPost', 'templatesDeleteRequest', templatesDeleteRequest)
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(templatesDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Destroy an Template only, issues related to this won\'t be able to send their newsletter.
         * @param {TemplatesDeleteRequest1} templatesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesDelete(templatesDeleteRequest1: TemplatesDeleteRequest1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatesDelete200Response2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesDelete(templatesDeleteRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatesDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Show the full contents of a Template
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatesDelete200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an Template
         * @param {TemplatesDeleteRequest2} templatesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesPatch(templatesDeleteRequest2: TemplatesDeleteRequest2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatesDelete200Response3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesPatch(templatesDeleteRequest2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create an Template
         * @param {TemplatesDeleteRequest} templatesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async templatesPost(templatesDeleteRequest: TemplatesDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplatesDelete200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.templatesPost(templatesDeleteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * Destroy an Template only, issues related to this won\'t be able to send their newsletter.
         * @param {TemplatesDeleteRequest1} templatesDeleteRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesDelete(templatesDeleteRequest1: TemplatesDeleteRequest1, options?: any): AxiosPromise<TemplatesDelete200Response2> {
            return localVarFp.templatesDelete(templatesDeleteRequest1, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesGet(options?: any): AxiosPromise<TemplatesDelete200Response> {
            return localVarFp.templatesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Show the full contents of a Template
         * @param {number} id The Template\&#39;s id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesIdGet(id: number, options?: any): AxiosPromise<TemplatesDelete200Response1> {
            return localVarFp.templatesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an Template
         * @param {TemplatesDeleteRequest2} templatesDeleteRequest2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPatch(templatesDeleteRequest2: TemplatesDeleteRequest2, options?: any): AxiosPromise<TemplatesDelete200Response3> {
            return localVarFp.templatesPatch(templatesDeleteRequest2, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an Template
         * @param {TemplatesDeleteRequest} templatesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templatesPost(templatesDeleteRequest: TemplatesDeleteRequest, options?: any): AxiosPromise<TemplatesDelete200Response1> {
            return localVarFp.templatesPost(templatesDeleteRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     * Destroy an Template only, issues related to this won\'t be able to send their newsletter.
     * @param {TemplatesDeleteRequest1} templatesDeleteRequest1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templatesDelete(templatesDeleteRequest1: TemplatesDeleteRequest1, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templatesDelete(templatesDeleteRequest1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templatesGet(options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templatesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show the full contents of a Template
     * @param {number} id The Template\&#39;s id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templatesIdGet(id: number, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templatesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an Template
     * @param {TemplatesDeleteRequest2} templatesDeleteRequest2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templatesPatch(templatesDeleteRequest2: TemplatesDeleteRequest2, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templatesPatch(templatesDeleteRequest2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an Template
     * @param {TemplatesDeleteRequest} templatesDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    public templatesPost(templatesDeleteRequest: TemplatesDeleteRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).templatesPost(templatesDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


